// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id                  Int             @id @default(autoincrement())
  email               String          @unique
  emailVerified       DateTime?
  username            String          @unique
  password            String
  forgotPasswordToken String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  eventsOrganized     Event[]
  eventsAttended      Int[]
  accounts            Account[]
  sessions            Session[]
  ActivateToken       ActivateToken[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model ActivateToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  activatedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id            Int      @id @default(autoincrement())
  name          String
  startDateTime String
  endDateTime   String
  imageURL      String?
  description   String?
  organizer     User     @relation(fields: [organizerId], references: [id])
  organizerId   Int
  attendees     Int[]
  location      Location @relation(fields: [locationId], references: [id])
  locationId    Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// model MembersAttendingEvents {
//   user       User     @relation(fields: [userId], references: [id])
//   userId     Int
//   Event      Event    @relation(fields: [eventId], references: [id])
//   eventId    Int
//   assignedAt DateTime @default(now())

//   @@id([userId, eventId])
// }

model Location {
  id         Int      @id @default(autoincrement())
  name       String
  buildingNo String
  street     String
  city       String
  state      String
  zip        String
  events     Event[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
